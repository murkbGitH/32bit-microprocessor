【プロセッサp32m1の設計手順】					(2015/06/23)

1. 準備
=======

(1-1) 作業用ディレクトリ
------------------------

適当な作業用ディレクトリに移動する．
下記の例では，proc-jikken というディレクトリの下で作業をする場合である．

  cd proc-jikken


(1-2) 配布ファイルのリポジトリのFork
-------------------------------------

ブラウザでプロセッサ実験のGitBucketサーバにアクセスしサインインする．
配布ファイルのリポジトリのページ（下記URL）を開く．

  http://jikken1.arc.cs.okayama-u.ac.jp/gitbucket/proc-jikken/p32m1

右上に Fork と書かれたボタンがある．このボタンを押して，配布リポジトリ
（proc-jikken/p32m1)をforkする．
すると，自分のアカウントに配布リポジトリのコピー（09425xxx/p32m1）が
作成される（ここで，09525xxxの箇所は自分のID）．
以降，このフォークされたリポジトリに対して変更を施す．


(1-3) ファイルのダウンロード
----------------------------

(1-2)でフォークしたGitBucketリポジトリ（09425xxx/p32m1)からファイルを
クローンして取得する．

  git clone http://jikken1.arc.cs.okayama-u.ac.jp/gitbucket/git/09425xxx/p32m1.git

カレントディレクトリにディレクトリp32m1が作られ，その下にファイルが
ダウンロードされる．

git clone により作成されたディレクトリp32m1に移動する．

  cd p32m1

このディレクトリがp32m1設計の作業用ディレクトリとなる．
なお，このディレクトリにある .git ファイルは消去しないこと．
すでに各自のGitBucketアカウントのリモートリポジトリと関連付けされている．

(1-4) サブモジュールファイルのコピー
------------------------------------

p32m1では，これまでに設計したいくつかのモジュールをサブモジュールとして
使用する．
必要なサブモジュールのファイルをコピーしてくる．
必要なファイルは以下に示すモジュールのファイルである．
加算器やレジスタファイルのモジュール構成等によっては，下記とは異なる場合も
あるので各自のモジュール構成に従って必要なファイルをコピーのこと．

alu32.[sfl,h]
 add32.[sfl,h]
  add4.[sfl,h]
shift32.[sfl,h]
reg32x32.[sfl,h]
 reg32x8.[sfl,h]
memunit.[slf,h]
 mem64KB.[cir,h]

なお，配布のMakefile にコピーを自動化するための記述が書かれている．
Makefileの冒頭部分に

  ADD32_DIR=  ../add32

といった形式で，必要となるサブモジュールのファイルの置かれているディレクトリを
指定している記述がある．（上の例では，一つ上のディレクトリにあるadd32という
ディレクトリの下に add32.sfl と add32.h が置かれている場合）
この部分を自分のディレクトリ構成に合わせて修正し，（必要に応じて記述を追加し）
次のコマンドをタイプすることで，必要なファイルがカレントディレクトリにコピー
される．

  make copy


2. p32m1の設計
==============

(2-1) プロセッサコア部分の実装
------------------------------

配布のp32m1.sflを完成させる．
記述されていない部分がコメントされているので，周りの記述を読んで
動作を理解して，空いている部分を埋めていく．

(2-2) シミュレーション
----------------------

p32m1.sfl記述ができたら，secondsでシミュレーションして正しく動作するかを
確認する．

クローンしたファイルには，いくつかのテスト用のスクリプトが含まれている．
まずは，これらのテストスクリプトを用いてシミュレーションを行う．

SFL記述を読み込むsecondsスクリプト load_p32m1.sec を各自のモジュール構成に
従って編集する．
Makefileにシミュレーションを行う記述が書かれている（必要に応じてMakefileを
編集のこと）ので，次のコマンドにより3つのシミュレーションを実行することが
できる．

  make sim

あるいは

  make test

3つのシミュレーションをそれぞれ実行したい場合は，make のターゲットに
test1, test2, あるいは test3 を指定する．

  make test1
  make test2
  make test3

詳しくは，Makefile の中身を参照のこと．

シミュレーション結果は，端末に出力するとともに，下記のファイルに保存される．

  (1) test_p32m1_01.result
  (2) test_p32m1_03.result
  (3) test_p32m1_07.result

シミュレーション結果をチェックして，エラー等の致命的な誤りがないか確認する．
致命的な誤りがある場合には，SFL記述の修正に戻る．

git clone で取得したファイルにシミュレーション結果のサンプルが含まれているので，
自分のシミュレーション結果とdiffコマンド等で比較する．
結果の比較用のためのコマンドがMakefileに書かれているので，次のコマンドで
サンプルとの比較を行うことができる．

  make diff

上記のコマンドにより，diff1, diff2, および diff3 という差分ファイルが作成
されるので，内容を確認して，シミュレーション結果出力部分に差分がないかを
確認する．
もし，結果部分に差分がある際には，SFL記述を再度見なおすデバッグ作業が必要
である．
差分がなくなるまで，SFL記述の修正，シミュレーション，シミュレーション結果の
確認作業を繰り返す．
正しく動作することが確認できたら，次の論理合成に進む．

(2-3) 論理合成
--------------

論理合成を簡単に行うために，Makefile.p32m1 という makefile を用意している．
Makefile.p32m1 の冒頭部分にある

  SUBMODULE=...

の行を，自分のサブモジュール構成に従って編集する．

Makefile.p32m1 を適切に編集後，次のコマンドで論理合成する．

  make synthe

論理合成時のメッセージは，画面に出力されるとともに，p32m1.auto.log という
ファイルに保存される．
p32m1.auto.log から合成により得られた諸量を抽出する．
次のコマンドによっても，諸量を表示できるので，自分で見つけた値が正しいか
チェックする．

  make spec

諸量のデータは，プロセッサ実験の登録ページに登録しておく．

論理合成時に作成される多くの中間ファイルを消去する場合は，

  make clean

とタイプする．

論理合成時のメッセージ，シミュレーション結果等も作成されたファイルを
すべて消去する場合は

  make distclean

とタイプする．


3. 設計したファイルのリポジトリへの登録
=======================================

※ (1-2)でForkしたリポジトリをローカルにgit cloneしている場合，(3-1)〜(3-2)の
作業は必要ない．変更したファイルを git add，git commit して git push することで
リモート側（GitBucketサーバ）のリポジトリが更新される．
もし，配布ファイルのリポジトリ（proc-jikken/p32m1）から直接 git clone した
場合は下記の作業を行い，GitBucketサーバ上にp32m1用リポジトリを作成する．


(3-1)リモートリポジトリの作成
-----------------------------

gitbucketサーバにサインインして，p32m1用のリポジトリを作成する．
[New Repository] をクリックして，リポジトリ名，説明をフォームに入力する．
ここでリポジトリ名は p32m1 とすること．
リポジトリは，Private を選択し，非公開にしておく．
[Initialize this repository with a README] のチェックは入れずに，
緑色の[Create repository]ボタンをクリックする．

すると，作成したリモートリポジトリへのファイルの追加手順が表示される．
以降の作業は，(3-2)で手順を説明するが，上側に表示される Create a new 
repository on the command line の手順に従って端末で作業することになる．


(3-2) リモートリポジトリへのファイルのpush
------------------------------------------

まず，リポジトリへは，中間的に作られるファイルは登録する必要はないので，
作業用ディレクトリにて次のコマンドで，不要なファイルを消去しておく．

  make distclean

まず，git cloneしたローカルリポジトリにはクローン元のリモートリポジトリと
関連付けられたリポジトリのデータベース（.gitディレクトリ）が既に存在するので，
このファイル群を次のコマンドで消去しておく．

  rm -rf .git

次に，下記のコマンドでローカルリポジトリを作成・初期化する．

  git init

続いて，下記のコマンドでローカルリポジトリに作業ディレクトリに存在する
すべてのファイルを追加する．

  git add .

次のコマンドにより，ローカルリポジトリへ変更を反映させる．

  git commit -m "first commit"

ここで，-m 以降はコミット時に要求されるメッセージである．ここでは
最初のコミットなので，"first commit" というメッセージとしている．

次のコマンドによりリモートリポジトリを追加する．

  git remote add origin http://jikken1.arc.cs.okayama-u.ac.jp/gitbucket/git/XXXXXXXX/p32m1.git

ここで，XXXXXXXXの部分は各自のユーザ名(09425xxx)に置き換えること．
なお，このコマンドは(3-1)でリポジトリを作成した際にブラウザに表示される手順に
書かれている一行なので，ブラウザからコピーして端末にペーストしてもよい．

最後に，次のコマンドでリモートリポジトリにローカルリポジトリの内容を反映させる．

  git push -u origin master

ユーザ名とパスワードを尋ねてくるので，gitbucketに登録しているユーザ名と
パスワードをタイプする．
なお，ここでユーザ名はエコーバックされずにパスワードの時のように伏せ字となるが
気にせずに間違えないように入力する．
ユーザ名とパスワードが正しく入力されると，リモートにファイルがpushされる．

ブラウザから作成したリポジトリにアクセスして，ファイルがpushされているか
確認する．

---
----------------------------------------------------------------------------
